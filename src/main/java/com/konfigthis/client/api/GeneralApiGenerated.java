/*
 * Unstructured Pipeline API
 * At Unstructured, we're on a mission to give organizations access to all of their data. We know the world runs on documentsâ€”from research reports and memos, to quarterly filings and plans of action, documents are the unit of information that companies depend on. And yet, 80% of this information is trapped in inaccessible formats, and businesses have long struggled to unlock this data, leading to information silos, inefficient decision-making, and repetitive work. Until now.  Unstructured captures this unstructured data wherever it lives and transforms it into AI-friendly JSON files for companies who are eager to fold AI into their business.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.PartitionParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GeneralApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeneralApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GeneralApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"unstructured-api-key\" is required but no API key was provided. Please set \"unstructured-api-key\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPipelineCall(File files, String strategy, String gzUncompressedContentType, String outputFormat, Boolean coordinates, String encoding, String hiResModelName, Boolean includePageBreaks, List<String> languages, Boolean pdfInferTableStructure, List<String> skipInferTableTypes, Boolean xmlKeepTags, String chunkingStrategy, Boolean multipageSections, Integer combineUnderNChars, Integer newAfterNChars, Integer maxCharacters, Integer overlap, Boolean overlapAll, List<String> extractImageBlockTypes, PartitionParameters partitionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partitionParameters;

        // create path and map variables
        String localVarPath = "/general/v0/general";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (files != null) {
            localVarFormParams.put("files", files);
        }

        if (strategy != null) {
            localVarFormParams.put("strategy", strategy);
        }

        if (gzUncompressedContentType != null) {
            localVarFormParams.put("gz_uncompressed_content_type", gzUncompressedContentType);
        }

        if (outputFormat != null) {
            localVarFormParams.put("output_format", outputFormat);
        }

        if (coordinates != null) {
            localVarFormParams.put("coordinates", coordinates);
        }

        if (encoding != null) {
            localVarFormParams.put("encoding", encoding);
        }

        if (hiResModelName != null) {
            localVarFormParams.put("hi_res_model_name", hiResModelName);
        }

        if (includePageBreaks != null) {
            localVarFormParams.put("include_page_breaks", includePageBreaks);
        }

        if (languages != null) {
            localVarFormParams.put("languages", languages);
        }

        if (pdfInferTableStructure != null) {
            localVarFormParams.put("pdf_infer_table_structure", pdfInferTableStructure);
        }

        if (skipInferTableTypes != null) {
            localVarFormParams.put("skip_infer_table_types", skipInferTableTypes);
        }

        if (xmlKeepTags != null) {
            localVarFormParams.put("xml_keep_tags", xmlKeepTags);
        }

        if (chunkingStrategy != null) {
            localVarFormParams.put("chunking_strategy", chunkingStrategy);
        }

        if (multipageSections != null) {
            localVarFormParams.put("multipage_sections", multipageSections);
        }

        if (combineUnderNChars != null) {
            localVarFormParams.put("combine_under_n_chars", combineUnderNChars);
        }

        if (newAfterNChars != null) {
            localVarFormParams.put("new_after_n_chars", newAfterNChars);
        }

        if (maxCharacters != null) {
            localVarFormParams.put("max_characters", maxCharacters);
        }

        if (overlap != null) {
            localVarFormParams.put("overlap", overlap);
        }

        if (overlapAll != null) {
            localVarFormParams.put("overlap_all", overlapAll);
        }

        if (extractImageBlockTypes != null) {
            localVarFormParams.put("extract_image_block_types", extractImageBlockTypes);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPipelineValidateBeforeCall(File files, String strategy, String gzUncompressedContentType, String outputFormat, Boolean coordinates, String encoding, String hiResModelName, Boolean includePageBreaks, List<String> languages, Boolean pdfInferTableStructure, List<String> skipInferTableTypes, Boolean xmlKeepTags, String chunkingStrategy, Boolean multipageSections, Integer combineUnderNChars, Integer newAfterNChars, Integer maxCharacters, Integer overlap, Boolean overlapAll, List<String> extractImageBlockTypes, PartitionParameters partitionParameters, final ApiCallback _callback) throws ApiException {
        return createPipelineCall(files, strategy, gzUncompressedContentType, outputFormat, coordinates, encoding, hiResModelName, includePageBreaks, languages, pdfInferTableStructure, skipInferTableTypes, xmlKeepTags, chunkingStrategy, multipageSections, combineUnderNChars, newAfterNChars, maxCharacters, overlap, overlapAll, extractImageBlockTypes, partitionParameters, _callback);

    }


    private ApiResponse<List<Object>> createPipelineWithHttpInfo(File files, String strategy, String gzUncompressedContentType, String outputFormat, Boolean coordinates, String encoding, String hiResModelName, Boolean includePageBreaks, List<String> languages, Boolean pdfInferTableStructure, List<String> skipInferTableTypes, Boolean xmlKeepTags, String chunkingStrategy, Boolean multipageSections, Integer combineUnderNChars, Integer newAfterNChars, Integer maxCharacters, Integer overlap, Boolean overlapAll, List<String> extractImageBlockTypes, PartitionParameters partitionParameters) throws ApiException {
        okhttp3.Call localVarCall = createPipelineValidateBeforeCall(files, strategy, gzUncompressedContentType, outputFormat, coordinates, encoding, hiResModelName, includePageBreaks, languages, pdfInferTableStructure, skipInferTableTypes, xmlKeepTags, chunkingStrategy, multipageSections, combineUnderNChars, newAfterNChars, maxCharacters, overlap, overlapAll, extractImageBlockTypes, partitionParameters, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPipelineAsync(File files, String strategy, String gzUncompressedContentType, String outputFormat, Boolean coordinates, String encoding, String hiResModelName, Boolean includePageBreaks, List<String> languages, Boolean pdfInferTableStructure, List<String> skipInferTableTypes, Boolean xmlKeepTags, String chunkingStrategy, Boolean multipageSections, Integer combineUnderNChars, Integer newAfterNChars, Integer maxCharacters, Integer overlap, Boolean overlapAll, List<String> extractImageBlockTypes, PartitionParameters partitionParameters, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPipelineValidateBeforeCall(files, strategy, gzUncompressedContentType, outputFormat, coordinates, encoding, hiResModelName, includePageBreaks, languages, pdfInferTableStructure, skipInferTableTypes, xmlKeepTags, chunkingStrategy, multipageSections, combineUnderNChars, newAfterNChars, maxCharacters, overlap, overlapAll, extractImageBlockTypes, partitionParameters, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePipelineRequestBuilder {
        private File files;
        private String strategy;
        private String gzUncompressedContentType;
        private String outputFormat;
        private Boolean coordinates;
        private String encoding;
        private String hiResModelName;
        private Boolean includePageBreaks;
        private List<String> languages;
        private Boolean pdfInferTableStructure;
        private List<String> skipInferTableTypes;
        private Boolean xmlKeepTags;
        private String chunkingStrategy;
        private Boolean multipageSections;
        private Integer combineUnderNChars;
        private Integer newAfterNChars;
        private Integer maxCharacters;
        private Integer overlap;
        private Boolean overlapAll;
        private List<String> extractImageBlockTypes;

        private CreatePipelineRequestBuilder() {
        }

        /**
         * Set files
         * @param files The file to extract (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder files(File files) {
            this.files = files;
            return this;
        }
        
        /**
         * Set strategy
         * @param strategy The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder strategy(String strategy) {
            this.strategy = strategy;
            return this;
        }
        
        /**
         * Set gzUncompressedContentType
         * @param gzUncompressedContentType If file is gzipped, use this content type after unzipping (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder gzUncompressedContentType(String gzUncompressedContentType) {
            this.gzUncompressedContentType = gzUncompressedContentType;
            return this;
        }
        
        /**
         * Set outputFormat
         * @param outputFormat The format of the response. Supported formats are application/json and text/csv. Default: application/json. (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder outputFormat(String outputFormat) {
            this.outputFormat = outputFormat;
            return this;
        }
        
        /**
         * Set coordinates
         * @param coordinates If true, return coordinates for each element. Default: false (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder coordinates(Boolean coordinates) {
            this.coordinates = coordinates;
            return this;
        }
        
        /**
         * Set encoding
         * @param encoding The encoding method used to decode the text input. Default: utf-8 (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder encoding(String encoding) {
            this.encoding = encoding;
            return this;
        }
        
        /**
         * Set hiResModelName
         * @param hiResModelName The name of the inference model used when strategy is hi_res (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder hiResModelName(String hiResModelName) {
            this.hiResModelName = hiResModelName;
            return this;
        }
        
        /**
         * Set includePageBreaks
         * @param includePageBreaks If True, the output will include page breaks if the filetype supports it. Default: false (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder includePageBreaks(Boolean includePageBreaks) {
            this.includePageBreaks = includePageBreaks;
            return this;
        }
        
        /**
         * Set languages
         * @param languages The languages present in the document, for use in partitioning and/or OCR (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder languages(List<String> languages) {
            this.languages = languages;
            return this;
        }
        
        /**
         * Set pdfInferTableStructure
         * @param pdfInferTableStructure If True and strategy&#x3D;hi_res, any Table Elements extracted from a PDF will include an additional metadata field, &#39;text_as_html&#39;, where the value (string) is a just a transformation of the data into an HTML &lt;table&gt;. (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder pdfInferTableStructure(Boolean pdfInferTableStructure) {
            this.pdfInferTableStructure = pdfInferTableStructure;
            return this;
        }
        
        /**
         * Set skipInferTableTypes
         * @param skipInferTableTypes The document types that you want to skip table extraction with. Default: [&#39;pdf&#39;, &#39;jpg&#39;, &#39;png&#39;] (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder skipInferTableTypes(List<String> skipInferTableTypes) {
            this.skipInferTableTypes = skipInferTableTypes;
            return this;
        }
        
        /**
         * Set xmlKeepTags
         * @param xmlKeepTags If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml. (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder xmlKeepTags(Boolean xmlKeepTags) {
            this.xmlKeepTags = xmlKeepTags;
            return this;
        }
        
        /**
         * Set chunkingStrategy
         * @param chunkingStrategy Use one of the supported strategies to chunk the returned elements. Currently supports: by_title (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder chunkingStrategy(String chunkingStrategy) {
            this.chunkingStrategy = chunkingStrategy;
            return this;
        }
        
        /**
         * Set multipageSections
         * @param multipageSections If chunking strategy is set, determines if sections can span multiple sections. Default: true (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder multipageSections(Boolean multipageSections) {
            this.multipageSections = multipageSections;
            return this;
        }
        
        /**
         * Set combineUnderNChars
         * @param combineUnderNChars If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500 (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder combineUnderNChars(Integer combineUnderNChars) {
            this.combineUnderNChars = combineUnderNChars;
            return this;
        }
        
        /**
         * Set newAfterNChars
         * @param newAfterNChars If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500 (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder newAfterNChars(Integer newAfterNChars) {
            this.newAfterNChars = newAfterNChars;
            return this;
        }
        
        /**
         * Set maxCharacters
         * @param maxCharacters If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 1500 (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder maxCharacters(Integer maxCharacters) {
            this.maxCharacters = maxCharacters;
            return this;
        }
        
        /**
         * Set overlap
         * @param overlap A prefix of this many trailing characters from prior text-split chunk is applied to second and later chunks formed from oversized elements by text-splitting. Default: None (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder overlap(Integer overlap) {
            this.overlap = overlap;
            return this;
        }
        
        /**
         * Set overlapAll
         * @param overlapAll When True, overlap is also applied to &#39;normal&#39; chunks formed by combining whole elements. Use with caution as this can introduce noise into otherwise clean semantic units. Default: None (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder overlapAll(Boolean overlapAll) {
            this.overlapAll = overlapAll;
            return this;
        }
        
        /**
         * Set extractImageBlockTypes
         * @param extractImageBlockTypes The types of elements to extract, for use in extracting image blocks as base64 encoded data stored in metadata fields (optional)
         * @return CreatePipelineRequestBuilder
         */
        public CreatePipelineRequestBuilder extractImageBlockTypes(List<String> extractImageBlockTypes) {
            this.extractImageBlockTypes = extractImageBlockTypes;
            return this;
        }
        
        /**
         * Build call for createPipeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PartitionParameters partitionParameters = buildBodyParams();
            return createPipelineCall(files, strategy, gzUncompressedContentType, outputFormat, coordinates, encoding, hiResModelName, includePageBreaks, languages, pdfInferTableStructure, skipInferTableTypes, xmlKeepTags, chunkingStrategy, multipageSections, combineUnderNChars, newAfterNChars, maxCharacters, overlap, overlapAll, extractImageBlockTypes, partitionParameters, _callback);
        }

        private PartitionParameters buildBodyParams() {
            PartitionParameters partitionParameters = new PartitionParameters();
            partitionParameters.files(this.files);
            partitionParameters.strategy(this.strategy);
            partitionParameters.gzUncompressedContentType(this.gzUncompressedContentType);
            partitionParameters.outputFormat(this.outputFormat);
            partitionParameters.coordinates(this.coordinates);
            partitionParameters.encoding(this.encoding);
            partitionParameters.hiResModelName(this.hiResModelName);
            partitionParameters.includePageBreaks(this.includePageBreaks);
            partitionParameters.languages(this.languages);
            partitionParameters.pdfInferTableStructure(this.pdfInferTableStructure);
            partitionParameters.skipInferTableTypes(this.skipInferTableTypes);
            partitionParameters.xmlKeepTags(this.xmlKeepTags);
            partitionParameters.chunkingStrategy(this.chunkingStrategy);
            partitionParameters.multipageSections(this.multipageSections);
            partitionParameters.combineUnderNChars(this.combineUnderNChars);
            partitionParameters.newAfterNChars(this.newAfterNChars);
            partitionParameters.maxCharacters(this.maxCharacters);
            partitionParameters.overlap(this.overlap);
            partitionParameters.overlapAll(this.overlapAll);
            partitionParameters.extractImageBlockTypes(this.extractImageBlockTypes);
            return partitionParameters;
        }

        /**
         * Execute createPipeline request
         * @return List&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public List<Object> execute() throws ApiException {
            PartitionParameters partitionParameters = buildBodyParams();
            ApiResponse<List<Object>> localVarResp = createPipelineWithHttpInfo(files, strategy, gzUncompressedContentType, outputFormat, coordinates, encoding, hiResModelName, includePageBreaks, languages, pdfInferTableStructure, skipInferTableTypes, xmlKeepTags, chunkingStrategy, multipageSections, combineUnderNChars, newAfterNChars, maxCharacters, overlap, overlapAll, extractImageBlockTypes, partitionParameters);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPipeline request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Object>> executeWithHttpInfo() throws ApiException {
            PartitionParameters partitionParameters = buildBodyParams();
            return createPipelineWithHttpInfo(files, strategy, gzUncompressedContentType, outputFormat, coordinates, encoding, hiResModelName, includePageBreaks, languages, pdfInferTableStructure, skipInferTableTypes, xmlKeepTags, chunkingStrategy, multipageSections, combineUnderNChars, newAfterNChars, maxCharacters, overlap, overlapAll, extractImageBlockTypes, partitionParameters);
        }

        /**
         * Execute createPipeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Object>> _callback) throws ApiException {
            PartitionParameters partitionParameters = buildBodyParams();
            return createPipelineAsync(files, strategy, gzUncompressedContentType, outputFormat, coordinates, encoding, hiResModelName, includePageBreaks, languages, pdfInferTableStructure, skipInferTableTypes, xmlKeepTags, chunkingStrategy, multipageSections, combineUnderNChars, newAfterNChars, maxCharacters, overlap, overlapAll, extractImageBlockTypes, partitionParameters, _callback);
        }
    }

    /**
     * Pipeline 1
     * 
     * @return CreatePipelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public CreatePipelineRequestBuilder createPipeline() throws IllegalArgumentException {
        return new CreatePipelineRequestBuilder();
    }
}
